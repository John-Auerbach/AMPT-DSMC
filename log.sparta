SPARTA (20 Jan 2025)
Running on 4 MPI task(s)
# SETUP --------------------------------------------------------------------------------------

shell "bash -c 'rm -f dumps/part.*.dat'"

shell "mkdir -p dumps"

units           si
seed            11111
dimension       3

# outflow in +x, periodic y,z. will inject at xlo (x=0)
boundary        o p p

# domain size (m)
variable        xmin equal -1.1
variable        xmax equal 1.1
variable        ymin equal -1.1
variable 	ymax equal 1.1
variable	zmin equal -1.1
variable	zmax equal 1.1

variable	Lx equal ${xmax}-${xmin}
variable	Lx equal 1.1-${xmin}
variable	Lx equal 1.1--1.1
variable        Ly equal ${ymax}-${ymin}
variable        Ly equal 1.1-${ymin}
variable        Ly equal 1.1--1.1
variable        Lz equal ${zmax}-${zmin}
variable        Lz equal 1.1-${zmin}
variable        Lz equal 1.1--1.1

create_box      ${xmin} ${xmax} ${ymin} ${ymax} ${zmin} ${zmax}
create_box      -1.1 ${xmax} ${ymin} ${ymax} ${zmin} ${zmax}
create_box      -1.1 1.1 ${ymin} ${ymax} ${zmin} ${zmax}
create_box      -1.1 1.1 -1.1 ${ymax} ${zmin} ${zmax}
create_box      -1.1 1.1 -1.1 1.1 ${zmin} ${zmax}
create_box      -1.1 1.1 -1.1 1.1 -1.1 ${zmax}
create_box      -1.1 1.1 -1.1 1.1 -1.1 1.1
Created orthogonal box = (-1.1 -1.1 -1.1) to (1.1 1.1 1.1)


# test case: n=3.8e20 m^-3, T=200 K, v=7.8 km/s in +x dir
variable        rho  equal 4e-5 # kg/m3
variable	nrho equal 3.8e20 # m-3
variable        T    equal 200.0 # K
variable	vx   equal 7800.0 # m/s

variable 	kB equal 1.380649e-23  # J/K
variable 	d equal 3.7e-10  # m
variable 	R equal 287.05 # (J / kg*K)
variable 	lambda equal ${kB}*${T}/(sqrt(2.0)*PI*${d}*${d}*${rho}*${R}) # m
variable 	lambda equal 1.380649e-23*${T}/(sqrt(2.0)*PI*${d}*${d}*${rho}*${R}) 
variable 	lambda equal 1.380649e-23*200/(sqrt(2.0)*PI*${d}*${d}*${rho}*${R}) 
variable 	lambda equal 1.380649e-23*200/(sqrt(2.0)*PI*3.7e-10*${d}*${rho}*${R}) 
variable 	lambda equal 1.380649e-23*200/(sqrt(2.0)*PI*3.7e-10*3.7e-10*${rho}*${R}) 
variable 	lambda equal 1.380649e-23*200/(sqrt(2.0)*PI*3.7e-10*3.7e-10*4e-05*${R}) 
variable 	lambda equal 1.380649e-23*200/(sqrt(2.0)*PI*3.7e-10*3.7e-10*4e-05*287.05) 
variable	vbar equal sqrt(8*${kB}*${T}/(PI*${rho}/${nrho})) # m/s
variable	vbar equal sqrt(8*1.380649e-23*${T}/(PI*${rho}/${nrho})) 
variable	vbar equal sqrt(8*1.380649e-23*200/(PI*${rho}/${nrho})) 
variable	vbar equal sqrt(8*1.380649e-23*200/(PI*4e-05/${nrho})) 
variable	vbar equal sqrt(8*1.380649e-23*200/(PI*4e-05/3.8e+20)) 

print "MEAN FREE PATH = ${lambda} m"
MEAN FREE PATH = 0.395391580478045 m
print "MEAN MOLEC VEL = ${vbar} m/s"
MEAN MOLEC VEL = 258.457118995713 m/s

# grid resolution

variable	dx equal ${lambda}/3 # m
variable	dx equal 0.395391580478045/3 
variable	mct equal ${lambda}/${vbar} # s
variable	mct equal 0.395391580478045/${vbar} 
variable	mct equal 0.395391580478045/258.457118995713 
variable	mtt equal ${dx}/${vbar} # s
variable	mtt equal 0.131797193492682/${vbar} 
variable	mtt equal 0.131797193492682/258.457118995713 
variable	dt equal ((${mct}<${mtt})*${mct}+(${mct}>=${mtt})*${mtt})/3.0 # min(${mct},${mtt})/3.0
variable	dt equal ((0.00152981501153622<${mtt})*${mct}+(${mct}>=${mtt})*${mtt})/3.0 
variable	dt equal ((0.00152981501153622<0.000509938337178741)*${mct}+(${mct}>=${mtt})*${mtt})/3.0 
variable	dt equal ((0.00152981501153622<0.000509938337178741)*0.00152981501153622+(${mct}>=${mtt})*${mtt})/3.0 
variable	dt equal ((0.00152981501153622<0.000509938337178741)*0.00152981501153622+(0.00152981501153622>=${mtt})*${mtt})/3.0 
variable	dt equal ((0.00152981501153622<0.000509938337178741)*0.00152981501153622+(0.00152981501153622>=0.000509938337178741)*${mtt})/3.0 
variable	dt equal ((0.00152981501153622<0.000509938337178741)*0.00152981501153622+(0.00152981501153622>=0.000509938337178741)*0.000509938337178741)/3.0 

print "CELL SIZE MUST BE LESS THAN ${dx} m"
CELL SIZE MUST BE LESS THAN 0.131797193492682 m
print "MEAN COLL TIME = ${mct} s"
MEAN COLL TIME = 0.00152981501153622 s
print "MEAN TRANSIT TIME = ${mtt} s"
MEAN TRANSIT TIME = 0.000509938337178741 s
print "TIMESTEP MUST BE < ${dt} s" # timestep set at end of script
TIMESTEP MUST BE < 0.000169979445726247 s

create_grid	100 100 100
WARNING: Per-processor grid cell memory will be large because global gridcut < 0.0 (../grid.cpp:499)
Created 1000000 child grid cells
  CPU time = 0.550517 secs
  create/ghost percent = 7.79936 92.2006
balance_grid    rcb part
WARNING: Per-processor grid cell memory will be large because global gridcut < 0.0 (../grid.cpp:499)
Balance grid migrated 740000 cells
  CPU time = 0.724717 secs
  reassign/sort/migrate/ghost percent = 10.8799 0.798349 25.0012 63.3205

# SURFACE GEOMETRY ----------------------------------------------------------------------------

read_surf   surf/ampt_box.surf  group ampt        # create surface group “ampt”
  12 triangles
  -0.5 0.5 xlo xhi
  -0.1 0.1 ylo yhi
  0 1 zlo zhi
  0.2 min triangle edge length
  0.1 min triangle area
  6132 0 = cells overlapping surfs, overlap cells with unmarked corner pts
  121 tiny edges removed
WARNING: Per-processor grid cell memory will be large because global gridcut < 0.0 (../grid.cpp:499)
  978380 15488 6132 = cells outside/inside/overlapping surfs
  6132 = surf cells with 1,2,etc splits
  10.448 10.448 = cell-wise and global flow volume
  CPU time = 0.615481 secs
  read/check/sort/surf2grid/ghost/inout/particle percent = 0.011696 0.0172408 6.05117 11.7357 82.1842 13.9348 0.000114869
  surf2grid time = 0.0722312 secs
  map/comm1/comm2/comm3/comm4/split percent = 26.5469 0.0322894 24.4512 7.47541 9.93078 17.6651
surf_collide wall diffuse 300.0 0.9           # define collision model “wall”
surf_modify  ampt collide wall

# SPECIES AND MIXTURE -------------------------------------------------------------------------


# use local species file
species         species/air.species N2 O2

# define inflow gas mixture named atm
mixture 	atm N2 frac 0.79
mixture		atm O2 frac 0.21
mixture         atm nrho ${nrho} vstream ${vx} 0.0 0.0 temp ${T}
mixture         atm nrho 3.8e+20 vstream ${vx} 0.0 0.0 temp ${T}
mixture         atm nrho 3.8e+20 vstream 7800 0.0 0.0 temp ${T}
mixture         atm nrho 3.8e+20 vstream 7800 0.0 0.0 temp 200

# particle weighting: set target of 2e5 sim particles, calculate weighting factor
variable        Ns_target equal 200000.0
variable        Vol       equal ${Lx}*${Ly}*${Lz}
variable        Vol       equal 2.2*${Ly}*${Lz}
variable        Vol       equal 2.2*2.2*${Lz}
variable        Vol       equal 2.2*2.2*2.2
variable        fnum      equal ${nrho}*${Vol}/${Ns_target}
variable        fnum      equal 3.8e+20*${Vol}/${Ns_target}
variable        fnum      equal 3.8e+20*10.648/${Ns_target}
variable        fnum      equal 3.8e+20*10.648/200000
global          fnum ${fnum} # global bc will be queried by each new particle
global          fnum 2.02312e+16 

# global useful for stat query later
global          nrho ${nrho}
global          nrho 3.8e+20

# create an initial fill (n 0 -> auto compute # of particles from fnum and nrho)
create_particles	atm n 0
Created 196243 particles
  CPU time = 0.0188221 secs

# continuous inflow; inject gas from xlo every step (fix -> run each time step, ID: "in")
fix		in emit/face atm xlo


# DIAGNOSTICS ---------------------------------------------------------------------------------


variable	diag_freq     equal 20 # dump diagnostics every _ timesteps

	        # ID, data type, mixture, every _ steps, filename, columns
dump            p1 particle atm ${diag_freq} dumps/part.*.dat id type x y z vx vy vz
dump            p1 particle atm 20 dumps/part.*.dat id type x y z vx vy vz

# cell-averaged (streaming+thermal) temperature
compute         Tbox temp # define a compute Tbox that calculates domain everaged temp
stats           ${diag_freq} # print diagnostics every _ timesteps
stats           20 
stats_style     step cpu np nattempt ncoll c_Tbox # print timestep, runtime, particles, collision stats, avg temp

# choose small dt << cell flight time; start 1e-7 s
timestep        1.0e-7
collide		vss atm vss/air.vss # variable soft sphere model
run             1000
Memory usage per proc in Mbytes:
  particl