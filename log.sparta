SPARTA (20 Jan 2025)
Running on 1 MPI task(s)
# SETUP --------------------------------------------------------------------------------------

shell "bash -c 'rm -f dumps/*.dat'"

shell "mkdir -p dumps"

units           si
seed            11111
dimension       3

# outflow in +x, periodic y,z. will inject at xlo (x=0)
boundary        o p p

# domain size (m)
variable        xmin equal -1.1
variable        xmax equal 1.1
variable        ymin equal -1.1
variable 	ymax equal 1.1
variable	zmin equal -1.1
variable	zmax equal 1.1

variable	Lx equal ${xmax}-${xmin}
variable	Lx equal 1.1-${xmin}
variable	Lx equal 1.1--1.1
variable        Ly equal ${ymax}-${ymin}
variable        Ly equal 1.1-${ymin}
variable        Ly equal 1.1--1.1
variable        Lz equal ${zmax}-${zmin}
variable        Lz equal 1.1-${zmin}
variable        Lz equal 1.1--1.1

create_box      ${xmin} ${xmax} ${ymin} ${ymax} ${zmin} ${zmax}
create_box      -1.1 ${xmax} ${ymin} ${ymax} ${zmin} ${zmax}
create_box      -1.1 1.1 ${ymin} ${ymax} ${zmin} ${zmax}
create_box      -1.1 1.1 -1.1 ${ymax} ${zmin} ${zmax}
create_box      -1.1 1.1 -1.1 1.1 ${zmin} ${zmax}
create_box      -1.1 1.1 -1.1 1.1 -1.1 ${zmax}
create_box      -1.1 1.1 -1.1 1.1 -1.1 1.1
Created orthogonal box = (-1.1 -1.1 -1.1) to (1.1 1.1 1.1)


# test case: n=3.8e20 m^-3, T=200 K, v=7.8 km/s in +x dir
variable        rho  equal 1.88e-5 # kg/m3
variable	nrho equal 3.91e20 # m-3
variable        T    equal 201.35 # K
variable	vx   equal 7800.0 # m/s

variable 	kB equal 1.380649e-23  # J/K
variable 	d equal 3.7e-10  # m
variable 	R equal 287.05 # (J / kg*K)
variable 	lambda equal ${kB}*${T}/(sqrt(2.0)*PI*${d}*${d}*${rho}*${R}) # m
variable 	lambda equal 1.380649e-23*${T}/(sqrt(2.0)*PI*${d}*${d}*${rho}*${R}) 
variable 	lambda equal 1.380649e-23*201.35/(sqrt(2.0)*PI*${d}*${d}*${rho}*${R}) 
variable 	lambda equal 1.380649e-23*201.35/(sqrt(2.0)*PI*3.7e-10*${d}*${rho}*${R}) 
variable 	lambda equal 1.380649e-23*201.35/(sqrt(2.0)*PI*3.7e-10*3.7e-10*${rho}*${R}) 
variable 	lambda equal 1.380649e-23*201.35/(sqrt(2.0)*PI*3.7e-10*3.7e-10*1.88e-05*${R}) 
variable 	lambda equal 1.380649e-23*201.35/(sqrt(2.0)*PI*3.7e-10*3.7e-10*1.88e-05*287.05) 
variable	vbar equal sqrt(8*${kB}*${T}/(PI*${rho}/${nrho})) # m/s
variable	vbar equal sqrt(8*1.380649e-23*${T}/(PI*${rho}/${nrho})) 
variable	vbar equal sqrt(8*1.380649e-23*201.35/(PI*${rho}/${nrho})) 
variable	vbar equal sqrt(8*1.380649e-23*201.35/(PI*1.88e-05/${nrho})) 
variable	vbar equal sqrt(8*1.380649e-23*201.35/(PI*1.88e-05/3.91e+20)) 

print "MEAN FREE PATH = ${lambda} m"
MEAN FREE PATH = 0.846937177970791 m
print "MEAN MOLEC VEL = ${vbar} m/s"
MEAN MOLEC VEL = 383.704568021383 m/s

# grid resolution

variable	dx equal ${lambda}/3 # m
variable	dx equal 0.846937177970791/3 
variable	mct equal ${lambda}/${vbar} # s
variable	mct equal 0.846937177970791/${vbar} 
variable	mct equal 0.846937177970791/383.704568021383 
variable	mtt equal ${dx}/${vbar} # s
variable	mtt equal 0.28231239265693/${vbar} 
variable	mtt equal 0.28231239265693/383.704568021383 
variable	dt equal ((${mct}<${mtt})*${mct}+(${mct}>=${mtt})*${mtt})/3.0 # min(${mct},${mtt})/3.0
variable	dt equal ((0.00220726373506086<${mtt})*${mct}+(${mct}>=${mtt})*${mtt})/3.0 
variable	dt equal ((0.00220726373506086<0.000735754578353618)*${mct}+(${mct}>=${mtt})*${mtt})/3.0 
variable	dt equal ((0.00220726373506086<0.000735754578353618)*0.00220726373506086+(${mct}>=${mtt})*${mtt})/3.0 
variable	dt equal ((0.00220726373506086<0.000735754578353618)*0.00220726373506086+(0.00220726373506086>=${mtt})*${mtt})/3.0 
variable	dt equal ((0.00220726373506086<0.000735754578353618)*0.00220726373506086+(0.00220726373506086>=0.000735754578353618)*${mtt})/3.0 
variable	dt equal ((0.00220726373506086<0.000735754578353618)*0.00220726373506086+(0.00220726373506086>=0.000735754578353618)*0.000735754578353618)/3.0 

print "CELL SIZE MUST BE LESS THAN ${dx} m"
CELL SIZE MUST BE LESS THAN 0.28231239265693 m
print "MEAN COLL TIME = ${mct} s"
MEAN COLL TIME = 0.00220726373506086 s
print "MEAN TRANSIT TIME = ${mtt} s"
MEAN TRANSIT TIME = 0.000735754578353618 s
print "TIMESTEP MUST BE < ${dt} s" # timestep set at end of script
TIMESTEP MUST BE < 0.000245251526117873 s

create_grid	100 80 80
Created 640000 child grid cells
  CPU time = 0.378215 secs
  create/ghost percent = 32.7814 67.2186
balance_grid    rcb part
Balance grid migrated 0 cells
  CPU time = 0.277115 secs
  reassign/sort/migrate/ghost percent = 27.3492 1.58695 8.22994 62.8339

variable	diag_freq   equal 100 # dump diagnostics every _ timesteps
variable 	tstep       equal 1.0e-7 # choose small timestep << cell flight time; start 1e-7 s

# SURFACE GEOMETRY ----------------------------------------------------------------------------

read_surf	surf/sat_inlet_through.surf  group ampt        # create surface group “ampt”
  40 triangles
  -0.55 0.45 xlo xhi
  -0.0999999 0.1 ylo yhi
  -0.0999999 0.1 zlo zhi
  0.00141407 min triangle edge length
  9.89901e-05 min triangle area
  1804 0 = cells overlapping surfs, overlap cells with unmarked corner pts
  637464 732 1804 = cells outside/inside/overlapping surfs
  1608 196 = surf cells with 1,2,etc splits
  10.6195 10.6195 = cell-wise and global flow volume
  CPU time = 0.36523 secs
  read/check/sort/surf2grid/ghost/inout/particle percent = 0.265397 0.0276324 7.47256 42.523 49.7114 25.0605 0.000137174
  surf2grid time = 0.155307 secs
  map/comm1/comm2/comm3/comm4/split percent = 34.3717 0.0128166 36.3509 2.87584 5.17412 10.1078

# SPECIES AND MIXTURE -------------------------------------------------------------------------

# use local species file
species         species/air.species N2 O2

# define inflow gas mixture named atm
mixture 	atm N2 frac 0.79
mixture		atm O2 frac 0.21
mixture     	atm nrho ${nrho} vstream ${vx} 0.0 0.0 temp ${T}
mixture     	atm nrho 3.91e+20 vstream ${vx} 0.0 0.0 temp ${T}
mixture     	atm nrho 3.91e+20 vstream 7800 0.0 0.0 temp ${T}
mixture     	atm nrho 3.91e+20 vstream 7800 0.0 0.0 temp 201.35

# particle weighting: set target of 2e5 sim particles, calculate weighting factor
variable        Ns_target equal 200000.0
variable        Vol       equal ${Lx}*${Ly}*${Lz}
variable        Vol       equal 2.2*${Ly}*${Lz}
variable        Vol       equal 2.2*2.2*${Lz}
variable        Vol       equal 2.2*2.2*2.2
variable        fnum      equal ${nrho}*${Vol}/${Ns_target}
variable        fnum      equal 3.91e+20*${Vol}/${Ns_target}
variable        fnum      equal 3.91e+20*10.648/${Ns_target}
variable        fnum      equal 3.91e+20*10.648/200000
global          fnum ${fnum} # global bc will be queried by each new particle
global          fnum 2.081684e+16 

# global useful for stat query later
global          nrho ${nrho}
global          nrho 3.91e+20

# create an initial fill (n 0 -> auto compute # of particles from fnum and nrho)
create_particles	atm n 0
Created 199464 particles
  CPU time = 0.0327282 secs

# continuous inflow; inject gas from xlo every step (fix -> run each time step, ID: "in")
fix		in emit/face atm xlo

# SURFACE COLLISIONS --------------------------------------------------------------------------

                # compute ID, type, surf group, mixture, property (energy flux on surface)
compute         compute_qwall surf ampt atm etot # etot = kinetic + internal energy. W/m^2 *multi-column array for all surface groups

                # running‑average every step so flux is never exactly zero (exponential decay)
fix             flux ave/surf ampt 1 1 1 c_compute_qwall[1] ave running  # running mean, updates each step
fix             fix_Tsurf surf/temp ampt 1 f_flux 300.0 0.9 Tsurf  # Stefan-Boltzmann


surf_collide 	wall diffuse s_Tsurf 0.9           # define collision model “wall”, random dir, use local facet temp, acc
surf_modify 	ampt collide wall # attach model to facets

# DIAGNOSTICS ---------------------------------------------------------------------------------

                # ID, data type, mixture, every _ steps, filename, columns (particle data)
dump            dump_part particle atm ${diag_freq} dumps/part.*.dat id type x y z vx vy vz
dump            dump_part particle atm 100 dumps/part.*.dat id type x