SPARTA (20 Jan 2025)
Running on 1 MPI task(s)
# SETUP --------------------------------------------------------------------------------------

shell "bash -c 'rm -f dumps/*.dat'"

shell "mkdir -p dumps"

units           si
seed            11111
dimension       3

# outflow in +x, periodic y,z. will inject at xlo (x=0)
boundary        o p p

# domain size (m)
variable        xmin equal -1.1
variable        xmax equal 1.1
variable        ymin equal -1.1
variable 	ymax equal 1.1
variable	zmin equal -1.1
variable	zmax equal 1.1

variable	Lx equal ${xmax}-${xmin}
variable	Lx equal 1.1-${xmin}
variable	Lx equal 1.1--1.1
variable        Ly equal ${ymax}-${ymin}
variable        Ly equal 1.1-${ymin}
variable        Ly equal 1.1--1.1
variable        Lz equal ${zmax}-${zmin}
variable        Lz equal 1.1-${zmin}
variable        Lz equal 1.1--1.1

create_box      ${xmin} ${xmax} ${ymin} ${ymax} ${zmin} ${zmax}
create_box      -1.1 ${xmax} ${ymin} ${ymax} ${zmin} ${zmax}
create_box      -1.1 1.1 ${ymin} ${ymax} ${zmin} ${zmax}
create_box      -1.1 1.1 -1.1 ${ymax} ${zmin} ${zmax}
create_box      -1.1 1.1 -1.1 1.1 ${zmin} ${zmax}
create_box      -1.1 1.1 -1.1 1.1 -1.1 ${zmax}
create_box      -1.1 1.1 -1.1 1.1 -1.1 1.1
Created orthogonal box = (-1.1 -1.1 -1.1) to (1.1 1.1 1.1)

# Load atmospheric data from NRLMSIS (run: python3 tools/load_atm_data.py)
variable        rho file data/rho.dat
variable	nrho file data/nrho.dat
variable        T file data/T.dat
variable	vx file data/vx.dat

print "Loaded NRLMSIS data: rho=${rho} nrho=${nrho} T=${T} vx=${vx}"
Loaded NRLMSIS data: rho=1.467664e-0 nrho=3.051413e+1 T=6.093997e+0 vx=7.814093e+0

variable 	kB equal 1.380649e-23  # J/K
variable 	d equal 3.7e-10  # m
variable 	R equal 287.05 # (J / kg*K)
variable 	lambda equal ${kB}*${T}/(sqrt(2.0)*PI*${d}*${d}*${rho}*${R}) # m
variable 	lambda equal 1.380649e-23*${T}/(sqrt(2.0)*PI*${d}*${d}*${rho}*${R}) 
variable 	lambda equal 1.380649e-23*6.093997e+0/(sqrt(2.0)*PI*${d}*${d}*${rho}*${R}) 
variable 	lambda equal 1.380649e-23*6.093997e+0/(sqrt(2.0)*PI*3.7e-10*${d}*${rho}*${R}) 
variable 	lambda equal 1.380649e-23*6.093997e+0/(sqrt(2.0)*PI*3.7e-10*3.7e-10*${rho}*${R}) 
variable 	lambda equal 1.380649e-23*6.093997e+0/(sqrt(2.0)*PI*3.7e-10*3.7e-10*1.467664e-0*${R}) 
variable 	lambda equal 1.380649e-23*6.093997e+0/(sqrt(2.0)*PI*3.7e-10*3.7e-10*1.467664e-0*287.05) 
variable	vbar equal sqrt(8*${kB}*${T}/(PI*${rho}/${nrho})) # m/s
variable	vbar equal sqrt(8*1.380649e-23*${T}/(PI*${rho}/${nrho})) 
variable	vbar equal sqrt(8*1.380649e-23*6.093997e+0/(PI*${rho}/${nrho})) 
variable	vbar equal sqrt(8*1.380649e-23*6.093997e+0/(PI*1.467664e-0/${nrho})) 
variable	vbar equal sqrt(8*1.380649e-23*6.093997e+0/(PI*1.467664e-0/3.051413e+1)) 

print "MEAN FREE PATH = ${lambda} m"
MEAN FREE PATH = 3.28346965689485e-07 m
print "MEAN MOLEC VEL = ${vbar} m/s"
MEAN MOLEC VEL = 6.67421191216474e-11 m/s

# grid resolution

variable	dx equal ${lambda}/3 # m
variable	dx equal 3.28346965689485e-07/3 
variable	mct equal ${lambda}/${vbar} # s
variable	mct equal 3.28346965689485e-07/${vbar} 
variable	mct equal 3.28346965689485e-07/6.67421191216474e-11 
variable	mtt equal ${dx}/${vbar} # s
variable	mtt equal 1.09448988563162e-07/${vbar} 
variable	mtt equal 1.09448988563162e-07/6.67421191216474e-11 
variable	dt equal ((${mct}<${mtt})*${mct}+(${mct}>=${mtt})*${mtt})/3.0 # min(${mct},${mtt})/3.0
variable	dt equal ((4919.63650556291<${mtt})*${mct}+(${mct}>=${mtt})*${mtt})/3.0 
variable	dt equal ((4919.63650556291<1639.87883518764)*${mct}+(${mct}>=${mtt})*${mtt})/3.0 
variable	dt equal ((4919.63650556291<1639.87883518764)*4919.63650556291+(${mct}>=${mtt})*${mtt})/3.0 
variable	dt equal ((4919.63650556291<1639.87883518764)*4919.63650556291+(4919.63650556291>=${mtt})*${mtt})/3.0 
variable	dt equal ((4919.63650556291<1639.87883518764)*4919.63650556291+(4919.63650556291>=1639.87883518764)*${mtt})/3.0 
variable	dt equal ((4919.63650556291<1639.87883518764)*4919.63650556291+(4919.63650556291>=1639.87883518764)*1639.87883518764)/3.0 

print "CELL SIZE MUST BE LESS THAN ${dx} m"
CELL SIZE MUST BE LESS THAN 1.09448988563162e-07 m
print "MEAN COLL TIME = ${mct} s"
MEAN COLL TIME = 4919.63650556291 s
print "MEAN TRANSIT TIME = ${mtt} s"
MEAN TRANSIT TIME = 1639.87883518764 s
print "TIMESTEP MUST BE < ${dt} s" # timestep set at end of script
TIMESTEP MUST BE < 546.62627839588 s

create_grid	100 80 80
Created 640000 child grid cells
  CPU time = 0.344051 secs
  create/ghost percent = 27.5296 72.4704
balance_grid    rcb part
Balance grid migrated 0 cells
  CPU time = 0.278501 secs
  reassign/sort/migrate/ghost percent = 27.0963 1.55456 6.53439 64.8148

variable	diag_freq   equal 100 # dump diagnostics every _ timesteps
variable 	tstep       equal 1.0e-7 # choose small timestep << cell flight time; start 1e-7 s

# SURFACE GEOMETRY ----------------------------------------------------------------------------

read_surf	surf/ampt_box.surf  group ampt        # create surface group “ampt”
  12 triangles
  -0.5 0.5 xlo xhi
  -0.1 0.1 ylo yhi
  -0.1 0.1 zlo zhi
  0.2 min triangle edge length
  0.02 min triangle area
  1360 0 = cells overlapping surfs, overlap cells with unmarked corner pts
  12 tiny edges removed
  637056 1584 1360 = cells outside/inside/overlapping surfs
  1360 = surf cells with 1,2,etc splits
  10.608 10.608 = cell-wise and global flow volume
  CPU time = 0.3674 secs
  read/check/sort/surf2grid/ghost/inout/particle percent = 0.0164665 0.0210008 6.25149 43.4137 50.2973 25.2951 0.000141807
  surf2grid time = 0.159502 secs
  map/comm1/comm2/comm3/comm4/split percent = 36.492 0.0101842 36.5828 2.70653 4.82363 7.85305

# SPECIES AND MIXTURE -------------------------------------------------------------------------

# use local species file
species         species/air.species N2 O2

# define inflow gas mixture named atm
mixture 	atm N2 frac 0.79
mixture		atm O2 frac 0.21
mixture     	atm nrho ${nrho} vstream ${vx} 0.0 0.0 temp ${T}
mixture     	atm nrho 3.051413e+1 vstream ${vx} 0.0 0.0 temp ${T}
mixture     	atm nrho 3.051413e+1 vstream 7.814093e+0 0.0 0.0 temp ${T}
mixture     	atm nrho 3.051413e+1 vstream 7.814093e+0 0.0 0.0 temp 6.093997e+0

# particle weighting: set target of 2e5 sim particles, calculate weighting factor
variable        Ns_target equal 200000.0
variable        Vol       equal ${Lx}*${Ly}*${Lz}
variable        Vol       equal 2.2*${Ly}*${Lz}
variable        Vol       equal 2.2*2.2*${Lz}
variable        Vol       equal 2.2*2.2*2.2
variable        fnum      equal ${nrho}*${Vol}/${Ns_target}
variable        fnum      equal 3.051413e+1*${Vol}/${Ns_target}
variable        fnum      equal 3.051413e+1*10.648/${Ns_target}
variable        fnum      equal 3.051413e+1*10.648/200000
global          fnum ${fnum} # global bc will be queried by each new particle
global          fnum 0.0016245722812 

# global useful for stat query later
global          nrho ${nrho}
global          nrho 3.051413e+1

# create an initial fill (n 0 -> auto compute # of particles from fnum and nrho)
create_particles	atm n 0
Created 199248 particles
  CPU time = 0.0337705 secs

# continuous inflow; inject gas from xlo every step (fix -> run each time step, ID: "in")
fix		in emit/face atm xlo

# SURFACE COLLISIONS --------------------------------------------------------------------------

                # compute ID, type, surf group, mixture, property (energy flux on surface)
compute         compute_qwall surf ampt atm etot # etot = kinetic + internal energy. W/m^2 *multi-column array for all surface groups

                # running‑average every step so flux is never exactly zero (exponential decay)
fix             flux ave/surf ampt 1 1 1 c_compute_qwall[1] ave running  # running mean, updates each step
fix             fix_Tsurf surf/temp ampt 1 f_flux 300.0 0.9 Tsurf  # Stefan-Boltzmann


surf_collide 	wall diffuse s_Tsurf 0.9           # define collision model “wall”, random dir, use local facet temp, acc
surf_modify 	ampt collide wall # attach model to facets

# DIAGNOSTICS ---------------------------------------------------------------------------------

                # ID, data type, mixture, every _ steps, filenam